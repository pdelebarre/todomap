{
  "info": {
    "name": "TodoMap API Tests",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Create Node",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Create Node\", () => {",
              "    pm.expect(pm.response.code).to.equal(201);",
              "    pm.expect(pm.response.json()).to.have.property('id');",
              "    pm.collectionVariables.set(\"node_id\", pm.response.json().id);",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"data\": {\n    \"label\": \"Test Project\",\n    \"description\": \"Test Description\",\n    \"nodeType\": \"project\",\n    \"dateOpened\": \"2025-04-22\",\n    \"targetDate\": \"2025-05-22\",\n    \"completed\": false\n  },\n  \"position\": { \"x\": 100, \"y\": 100 },\n  \"type\": \"custom\"\n}"
        },
        "url": "{{base_url}}/nodes"
      }
    },
    {
      "name": "Read Node",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "pm.test(\"Response has correct id\", function () {",
              "    var json = pm.response.json();",
              "    pm.expect(json.id).to.eql(pm.collectionVariables.get(\"node_id\"));",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "url": "{{base_url}}/nodes/{{node_id}}"
      }
    },
    {
      "name": "Update Node",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "pm.test(\"Label is updated\", function () {",
              "    var json = pm.response.json();",
              "    pm.expect(json.data.label).to.eql(\"Updated Project\");",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "PUT",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"data\": {\n    \"label\": \"Updated Project\",\n    \"description\": \"Updated Description\",\n    \"nodeType\": \"project\",\n    \"dateOpened\": \"2025-04-22\",\n    \"targetDate\": \"2025-05-22\",\n    \"completed\": true\n  },\n  \"position\": { \"x\": 200, \"y\": 200 },\n  \"type\": \"custom\"\n}"
        },
        "url": "{{base_url}}/nodes/{{node_id}}"
      }
    },
    {
      "name": "Delete Node",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 204\", function () {",
              "    pm.response.to.have.status(204);",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "url": "{{base_url}}/nodes/{{node_id}}"
      }
    },
    {
      "name": "Verify Node Deletion",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 404\", function () {",
              "    pm.response.to.have.status(404);",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "url": "{{base_url}}/nodes/{{node_id}}"
      }
    },
    {
      "name": "Create Node A",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Create Node A\", () => {",
              "    pm.expect(pm.response.code).to.equal(201);",
              "    pm.expect(pm.response.json()).to.have.property('id');",
              "    pm.collectionVariables.set(\"node_id_a\", pm.response.json().id);",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"data\": {\n    \"label\": \"Node A\",\n    \"description\": \"First Node\",\n    \"nodeType\": \"project\",\n    \"dateOpened\": \"2025-04-22\",\n    \"targetDate\": \"2025-05-22\",\n    \"completed\": false\n  },\n  \"position\": { \"x\": 100, \"y\": 100 },\n  \"type\": \"custom\"\n}"
        },
        "url": "{{base_url}}/nodes"
      }
    },
    {
      "name": "Create Node B",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Create Node B\", () => {",
              "    pm.expect(pm.response.code).to.equal(201);",
              "    pm.expect(pm.response.json()).to.have.property('id');",
              "    pm.collectionVariables.set(\"node_id_b\", pm.response.json().id);",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"data\": {\n    \"label\": \"Node B\",\n    \"description\": \"Second Node\",\n    \"nodeType\": \"task\",\n    \"dateOpened\": \"2025-04-22\",\n    \"targetDate\": \"2025-05-23\",\n    \"completed\": false\n  },\n  \"position\": { \"x\": 200, \"y\": 200 },\n  \"type\": \"custom\"\n}"
        },
        "url": "{{base_url}}/nodes"
      }
    },
    {
      "name": "Create Edge",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Edge created\", function () {",
              "    pm.response.to.have.status(201);",
              "    pm.expect(pm.response.json()).to.have.property('id');",
              "    pm.collectionVariables.set(\"edge_id\", pm.response.json().id);",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          { "key": "Content-Type", "value": "application/json" }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"source\": \"{{node_id_a}}\",\n  \"target\": \"{{node_id_b}}\",\n  \"type\": \"custom\",\n  \"animated\": true,\n  \"label\": \"Connection\"\n}"
        },
        "url": "{{base_url}}/edges"
      }
    },
    {
      "name": "Delay 1s before Update Edge",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "setTimeout(function(){}, 1000);"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "url": "{{base_url}}/nodes/{{node_id_a}}"
      }
    },
    {
      "name": "Read Edge",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "pm.test(\"Edge has correct id\", function () {",
              "    pm.expect(pm.response.json().id).to.eql(pm.collectionVariables.get(\"edge_id\"));",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "url": "{{base_url}}/edges/{{edge_id}}"
      }
    },
    {
      "name": "Update Edge",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "pm.test(\"Edge label is updated\", function () {",
              "    pm.expect(pm.response.json().label).to.eql(\"Updated Connection\");",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "PUT",
        "header": [
          { "key": "Content-Type", "value": "application/json" }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"source\": \"{{node_id_a}}\",\n  \"target\": \"{{node_id_b}}\",\n  \"type\": \"custom\",\n  \"animated\": true,\n  \"label\": \"Updated Connection\"\n}"
        },
        "url": "{{base_url}}/edges/{{edge_id}}"
      }
    },
    {
      "name": "Delete Edge",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 204\", function () {",
              "    pm.response.to.have.status(204);",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "url": "{{base_url}}/edges/{{edge_id}}"
      }
    },
    {
      "name": "Verify Edge Deletion",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 404\", function () {",
              "    pm.response.to.have.status(404);",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "url": "{{base_url}}/edges/{{edge_id}}"
      }
    },
    {
      "name": "Get All Nodes",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "pm.test(\"Response is an array\", function () {",
              "    pm.expect(pm.response.json()).to.be.an('array');",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "url": "{{base_url}}/nodes"
      }
    },
    {
      "name": "Get All Edges",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "pm.test(\"Response is an array\", function () {",
              "    pm.expect(pm.response.json()).to.be.an('array');",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "url": "{{base_url}}/edges"
      }
    },
    {
      "name": "Create Parent Node",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Create Parent Node\", () => {",
              "    pm.expect(pm.response.code).to.equal(201);",
              "    pm.expect(pm.response.json()).to.have.property('id');",
              "    pm.collectionVariables.set(\"parent_id\", pm.response.json().id);",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          { "key": "Content-Type", "value": "application/json" }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"data\": { \"label\": \"Parent\", \"nodeType\": \"project\" },\n  \"position\": { \"x\": 0, \"y\": 0 },\n  \"type\": \"custom\"\n}"
        },
        "url": "{{base_url}}/nodes"
      }
    },
    {
      "name": "Create Child Node",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Create Child Node\", () => {",
              "    pm.expect(pm.response.code).to.equal(201);",
              "    pm.expect(pm.response.json()).to.have.property('id');",
              "    pm.collectionVariables.set(\"child_id\", pm.response.json().id);",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          { "key": "Content-Type", "value": "application/json" }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"data\": { \"label\": \"Child\", \"nodeType\": \"task\" },\n  \"position\": { \"x\": 0, \"y\": 100 },\n  \"type\": \"custom\"\n}"
        },
        "url": "{{base_url}}/nodes"
      }
    },
    {
      "name": "Create Grandchild Node",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Create Grandchild Node\", () => {",
              "    pm.expect(pm.response.code).to.equal(201);",
              "    pm.expect(pm.response.json()).to.have.property('id');",
              "    pm.collectionVariables.set(\"grandchild_id\", pm.response.json().id);",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          { "key": "Content-Type", "value": "application/json" }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"data\": { \"label\": \"Grandchild\", \"nodeType\": \"task\" },\n  \"position\": { \"x\": 0, \"y\": 200 },\n  \"type\": \"custom\"\n}"
        },
        "url": "{{base_url}}/nodes"
      }
    },
    {
      "name": "Create Edge Parent-Child",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Edge Parent-Child created\", function () {",
              "    pm.response.to.have.status(201);",
              "    pm.expect(pm.response.json()).to.have.property('id');",
              "    pm.collectionVariables.set(\"edge_parent_child_id\", pm.response.json().id);",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          { "key": "Content-Type", "value": "application/json" }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"source\": \"{{parent_id}}\",\n  \"target\": \"{{child_id}}\",\n  \"type\": \"custom\",\n  \"animated\": true,\n  \"label\": \"Parent-Child\"\n}"
        },
        "url": "{{base_url}}/edges"
      }
    },
    {
      "name": "Create Edge Child-Grandchild",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Edge Child-Grandchild created\", function () {",
              "    pm.response.to.have.status(201);",
              "    pm.expect(pm.response.json()).to.have.property('id');",
              "    pm.collectionVariables.set(\"edge_child_grandchild_id\", pm.response.json().id);",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          { "key": "Content-Type", "value": "application/json" }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"source\": \"{{child_id}}\",\n  \"target\": \"{{grandchild_id}}\",\n  \"type\": \"custom\",\n  \"animated\": true,\n  \"label\": \"Child-Grandchild\"\n}"
        },
        "url": "{{base_url}}/edges"
      }
    },
    {
      "name": "Delete Parent Node (Cascade)",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 204\", function () {",
              "    pm.response.to.have.status(204);",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "url": "{{base_url}}/nodes/{{parent_id}}"
      }
    },
    {
      "name": "Verify Parent Node Deleted",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 404\", function () {",
              "    pm.response.to.have.status(404);",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "url": "{{base_url}}/nodes/{{parent_id}}"
      }
    },
    {
      "name": "Verify Child Node Deleted",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 404\", function () {",
              "    pm.response.to.have.status(404);",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "url": "{{base_url}}/nodes/{{child_id}}"
      }
    },
    {
      "name": "Verify Grandchild Node Deleted",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 404\", function () {",
              "    pm.response.to.have.status(404);",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "url": "{{base_url}}/nodes/{{grandchild_id}}"
      }
    },
    {
      "name": "Verify Edge Parent-Child Deleted",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 404\", function () {",
              "    pm.response.to.have.status(404);",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "url": "{{base_url}}/edges/{{edge_parent_child_id}}"
      }
    },
    {
      "name": "Verify Edge Child-Grandchild Deleted",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 404\", function () {",
              "    pm.response.to.have.status(404);",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "url": "{{base_url}}/edges/{{edge_child_grandchild_id}}"
      }
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8080/api"
    }
  ]
}
