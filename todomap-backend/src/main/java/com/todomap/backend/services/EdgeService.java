package com.todomap.backend.services;

import com.todomap.backend.dtos.EdgeDTO;
import com.todomap.backend.mappers.EntityDTOMapper;
import com.todomap.backend.models.Edge;
import com.todomap.backend.models.Node;
import com.todomap.backend.repositories.EdgeRepository;
import com.todomap.backend.repositories.NodeRepository;
import jakarta.persistence.EntityNotFoundException;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class EdgeService {

    private final EdgeRepository edgeRepository;
    private final NodeRepository nodeRepository;
    private final EntityDTOMapper mapper;

    @Transactional(readOnly = true)
    public List<EdgeDTO> getAllEdges() {
        return edgeRepository.findAll().stream()
                .map(mapper::toEdgeDTO)
                .collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
    public EdgeDTO getEdgeById(String id) {
        Edge edge = edgeRepository.findById(id)
                .orElseThrow(() -> new EntityNotFoundException("Edge not found with id: " + id));
        return mapper.toEdgeDTO(edge);
    }

    @Transactional
    public EdgeDTO createEdge(EdgeDTO edgeDTO) {
        Node source = nodeRepository.findById(edgeDTO.getSource())
                .orElseThrow(() -> new EntityNotFoundException("Source node not found with id: " + edgeDTO.getSource()));
        
        Node target = nodeRepository.findById(edgeDTO.getTarget())
                .orElseThrow(() -> new EntityNotFoundException("Target node not found with id: " + edgeDTO.getTarget()));
        
        Edge edge = mapper.toEdgeEntity(edgeDTO, source, target);
        edge.setId(null); // Ensure ID is generated by the database
        Edge savedEdge = edgeRepository.save(edge);
        return mapper.toEdgeDTO(savedEdge);
    }

    @Transactional
    public EdgeDTO updateEdge(String id, EdgeDTO edgeDTO) {
        if (!edgeRepository.existsById(id)) {
            throw new EntityNotFoundException("Edge not found with id: " + id);
        }
        
        Node source = nodeRepository.findById(edgeDTO.getSource())
                .orElseThrow(() -> new EntityNotFoundException("Source node not found with id: " + edgeDTO.getSource()));
        
        Node target = nodeRepository.findById(edgeDTO.getTarget())
                .orElseThrow(() -> new EntityNotFoundException("Target node not found with id: " + edgeDTO.getTarget()));
        
        Edge edge = mapper.toEdgeEntity(edgeDTO, source, target);
        edge.setId(id); // Ensure ID is preserved
        Edge updatedEdge = edgeRepository.save(edge);
        return mapper.toEdgeDTO(updatedEdge);
    }

    @Transactional
    public void deleteEdge(String id) {
        if (!edgeRepository.existsById(id)) {
            throw new EntityNotFoundException("Edge not found with id: " + id);
        }
        edgeRepository.deleteById(id);
    }

    @Transactional(readOnly = true)
    public List<EdgeDTO> getEdgesBySourceId(String sourceId) {
        return edgeRepository.findBySourceId(sourceId).stream()
                .map(mapper::toEdgeDTO)
                .collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
    public List<EdgeDTO> getEdgesByTargetId(String targetId) {
        return edgeRepository.findByTargetId(targetId).stream()
                .map(mapper::toEdgeDTO)
                .collect(Collectors.toList());
    }

    @Transactional
    public void deleteEdgesBySourceId(String sourceId) {
        edgeRepository.deleteBySourceId(sourceId);
    }

    @Transactional
    public void deleteEdgesByTargetId(String targetId) {
        edgeRepository.deleteByTargetId(targetId);
    }

    @Transactional(readOnly = true)
    public boolean existsBySourceIdAndTargetId(String sourceId, String targetId) {
        return edgeRepository.existsBySourceIdAndTargetId(sourceId, targetId);
    }
}
