package com.todomap.backend.services;

import java.util.List;

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.todomap.backend.dtos.NodeDTO;
import com.todomap.backend.mappers.EntityDTOMapper;
import com.todomap.backend.models.Node;
import com.todomap.backend.repositories.EdgeRepository;
import com.todomap.backend.repositories.NodeRepository;

import jakarta.persistence.EntityNotFoundException;
import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class NodeService {

    private final NodeRepository nodeRepository;
    private final EdgeRepository edgeRepository;
    private final EntityDTOMapper mapper;
    private final NodeDeletionService nodeDeletionService;

    @Transactional(readOnly = true)
    public List<NodeDTO> getAllNodes() {
        return nodeRepository.findAll().stream()
                .map(mapper::toNodeDTO)
                .toList();
    }

    @Transactional(readOnly = true)
    public NodeDTO getNodeById(String id) {
        Node node = nodeRepository.findById(id)
                .orElseThrow(() -> new EntityNotFoundException("Node not found with id: " + id));
        return mapper.toNodeDTO(node);
    }

    @Transactional
    public NodeDTO createNode(NodeDTO nodeDTO) {
        Node node = mapper.toNodeEntity(nodeDTO);
        node.setId(null); // Ensure ID is generated by the database
        Node savedNode = nodeRepository.save(node);
        return mapper.toNodeDTO(savedNode);
    }

    @Transactional
    public NodeDTO updateNode(String id, NodeDTO nodeDTO) {
        if (!nodeRepository.existsById(id)) {
            throw new EntityNotFoundException("Node not found with id: " + id);
        }
        
        Node node = mapper.toNodeEntity(nodeDTO);
        node.setId(id); // Ensure ID is preserved
        Node updatedNode = nodeRepository.save(node);
        return mapper.toNodeDTO(updatedNode);
    }

    @Transactional
    public void deleteNode(String id) {
        if (!nodeRepository.existsById(id)) {
            throw new EntityNotFoundException("Node not found with id: " + id);
        }
        nodeRepository.deleteById(id);
    }

    @Transactional(readOnly = true)
    public List<NodeDTO> getNodesByType(String nodeType) {
        return nodeRepository.findByNodeType(nodeType).stream()
                .map(mapper::toNodeDTO)
                .toList();
    }

    @Transactional(readOnly = true)
    public List<NodeDTO> getRootNodes() {
        return nodeRepository.findRootNodes().stream()
                .map(mapper::toNodeDTO)
                .toList();
    }

    @Transactional(readOnly = true)
    public List<NodeDTO> getCompletedNodes() {
        return nodeRepository.findCompletedNodes().stream()
                .map(mapper::toNodeDTO)
                .toList();
    }

    @Transactional(readOnly = true)
    public List<NodeDTO> getNodesWithTargetDate() {
        return nodeRepository.findNodesWithTargetDate().stream()
                .map(mapper::toNodeDTO)
                .toList();
    }

    @Transactional
    public void deleteNodeAndDescendants(String nodeId) {
        nodeDeletionService.deleteNodeAndDescendants(nodeId);
    }
}
